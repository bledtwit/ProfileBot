/**
 * src/index.js
 * Portfolio Bot ‚Äî clean start (—Å –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏)
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

const TOKEN = process.env.TELEGRAM_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID && String(process.env.ADMIN_ID);
const PORT = process.env.PORT || 3000;

if (!TOKEN || !ADMIN_ID) {
  console.error('‚ùå TELEGRAM_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env');
  process.exit(1);
}

(async () => {
  const bot = new TelegramBot(TOKEN, { polling: true });

  // Express –¥–ª—è health-check
  const app = express();
  app.get('/', (req, res) => res.send('Portfolio Bot ‚Äî running'));
  app.listen(PORT, () => console.log(`üöÄ HTTP server listening on ${PORT}`));

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  const welcomeText = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ @javafriendch.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá`;

  const mainMenu = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ü§ñ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', callback_data: 'order' }],
        [{ text: 'üë®‚Äçüíª –£–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ', callback_data: 'about' }],
        [{ text: 'üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è', callback_data: 'support' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
      ]
    }
  };

  // /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id; // ‚ö†Ô∏è –ø–æ–ª—É—á–∞–µ–º chatId –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ @javafriendch.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', {
      reply_markup: {
        remove_keyboard: true // —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      }
    });

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', mainMenu);
  });


  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞—è–≤–æ–∫
  const userStates = new Map(); // userId -> { step, data }

  // –ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const state = userStates.get(chatId);

    if (data === 'order') {
      userStates.set(chatId, { step: 1, data: {} });
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
    } else if (data === 'confirm_order' && state && state.step === 4) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
      const orderText = `üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–æ—Ç–∞!\n\n` +
        `üë§ –ò–º—è: ${state.data.name}\n` +
        `üìù –ó–∞–¥–∞—á–∏: ${state.data.tasks}\n` +
        `‚è∞ –°—Ä–æ–∫: ${state.data.deadline}`;

      await bot.sendMessage(process.env.ADMIN_ID, orderText);
      await bot.sendMessage(chatId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', mainMenu);
      userStates.delete(chatId);
    } else if (data === 'cancel_order') {
      await bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', mainMenu);
      userStates.delete(chatId);
    } else {
      switch (data) {
        case 'about':
          await bot.sendMessage(chatId,
        `üë®‚Äçüíª –û–±–æ –º–Ω–µ:
      –Ø ‚Äî Java Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.
      –°–æ–∑–¥–∞—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–∏—Å—ã –∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–≤.

        üìÇ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üåê GitHub', url: 'https://github.com/bledtwit' }],
                [{ text: 'üí± FinanceBot', url: 'https://github.com/bledtwit/financebot' }],
                [{ text: 'üñ• –ú–æ–π —Å–∞–π—Ç', url: 'https://bledtwit.github.io/' }],
                [{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          });
          break;
          case 'main_menu':
            await bot.sendMessage(chatId, welcomeText, mainMenu);
            break;

        case 'support':
          await bot.sendMessage(chatId,
        `‚òï –ë—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ!

        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Boosty –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤.`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üöÄ Boosty', url: 'https://boosty.to/bledtwit' }],
                [{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          });
          break;
        case 'help':
           // –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
           userStates.set(chatId, { step: 'help' });
           await bot.sendMessage(chatId,
         `üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É –ª–∏—á–Ω–æ.`);
           break;
        default:
          await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.', mainMenu);
      }
    }

    try { await bot.answerCallbackQuery(query.id); } catch {}
  });

  // –õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const state = userStates.get(chatId);

    if (!state) return; // –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏–º

    const text = msg.text?.trim();
    if (!text) return;


// –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–º–æ—â–∏
if (state.step === 'help') {
  const questionText = msg.text?.trim();
  if (questionText) {
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await bot.sendMessage(ADMIN_ID,
`üì© –í–æ–ø—Ä–æ—Å –æ—Ç @${msg.from?.username || msg.from?.first_name}:\n\n${questionText}`);

    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(chatId, '‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');

    // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(chatId);
  }
  return; // –¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
}

    if (state.step === 1) {
      state.data.name = text;
      state.step = 2;
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ—Ç:');
    } else if (state.step === 2) {
      state.data.tasks = text;
      state.step = 3;
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    } else if (state.step === 3) {
      state.data.deadline = text;
      state.step = 4;

      const summary = `üì© –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n` +
        `üë§ –ò–º—è: ${state.data.name}\n` +
        `üìù –ó–∞–¥–∞—á–∏: ${state.data.tasks}\n` +
        `‚è∞ –°—Ä–æ–∫: ${state.data.deadline}\n\n` +
        `–í—Å–µ –≤–µ—Ä–Ω–æ?`;

      await bot.sendMessage(chatId, summary, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –î–∞', callback_data: 'confirm_order' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_order' }]
          ]
        }
      });
    }
  });

  console.log('‚úÖ Bot started (polling)');
})();
